# -*- coding: utf-8 -*-
"""final_app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kc669hBjJZjcvyRaC9yoT3ioWflfx37n
"""

import streamlit as st
import base64
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
import numpy as np


df = pd.read_csv('Dataset=diabetes_binary_health_indicators_BRFSS2015.csv')
st.title("***HealthVista Unveiling Diabetes Stages through Predictive Health Indicators***")
st.info("***By Bisma Razi***")

st.sidebar.info("About App")
st.sidebar.info("This web app helps you find out whether you have diabetes or not.")
st.sidebar.info("Don't forget to rate this app")
st.sidebar.header("**Patient Data**")
st.sidebar.header("**Please Enter Your Health Indicators by Using Slider**")
st.subheader("***Data Statistics***")
st.write(df.describe())
# X AND Y DATA
x = df.drop(['Diabetes_binary'], axis = 1)
y = df.iloc[:, -1]
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state = 0)


# FUNCTION
def user_report():
    HighBP= st.sidebar.slider('Do you have HighBP(0=No,1=Yes)', 0, 1, 0)
    HighChol = st.sidebar.slider('Do you have HighChol(0=No,1=Yes)', 0, 1, 0)
    CholCheck = st.sidebar.slider('CholCheck(0 = no cholesterol check in 5 years, 1 = yes cholesterol check in 5 years)', 0, 1, 0)
    BMI = st.sidebar.slider('BMI(Body Mass Index)', 0, 67, 20)
    Smoker = st.sidebar.slider('Are you Smoker(0=No,1=Yes)', 0, 1, 0)
    Stroke = st.sidebar.slider('You had a stroke(0=No,1=Yes)', 0, 1, 0)
    HeartDiseaseorAttack = st.sidebar.slider('Any HeartDisease or Attack(0=No,1=Yes)', 0, 1, 0)
    PhysActivity = st.sidebar.slider('Physical Activity in Past 30 days - not including job(0=No,1=Yes)', 0, 1, 0)
    Fruits = st.sidebar.slider('Consume Fruit 1 or more times per day(0=No,1=Yes)', 0, 1, 0)
    Veggies = st.sidebar.slider('Consume Vegetables 1 or more times per day( 0 = no 1 = yes)', 0, 1, 0)
    HvyAlcoholConsump = st.sidebar.slider('HvyAlcoholConsump', 0, 1, 0)
    AnyHealthcare = st.sidebar.slider('Have any kind of health care coverage, including health insurance( 0 = no 1 = yes)', 0, 1, 0)
    GenHlth = st.sidebar.slider('Would you say that in general your health is:excellent 2 = very good 3 = good 4 = fair 5 = poor', 1, 5, 1)
    MentHlth = st.sidebar.slider('MentHlth', 0, 1, 0)
    PhysHlth = st.sidebar.slider('PhysHlth', 0, 1, 0)
    DiffWalk = st.sidebar.slider('DiffWalk(Do you have serious difficulty walking or climbing stairs?)( 0 = no 1 = yes)', 0, 1, 0)
    Age_Midpoint = st.sidebar.slider('Age', 21, 88, 33)
    # Use a selectbox for the "Sex" feature
    sex_options = ['Male', 'Female']
    sex_index = st.sidebar.selectbox('Sex(0 = female 1 = male)', range(len(sex_options)), index=0)  # Default to Male
    sex = sex_options[sex_index]
    
    user_report_data = {
        'HighBP': float( HighBP ),
        'HighChol': float(HighChol),
        'CholCheck': float(CholCheck),
        'BMI': float(BMI),
        'Smoker': float(Smoker),
        'Stroke': float(Stroke),
        'HeartDiseaseorAttack': float(HeartDiseaseorAttack),
        'PhysActivity': float(PhysActivity),
        'Fruits': float(Fruits),
        'Veggies': float(Veggies),
        'HvyAlcoholConsump': float(HvyAlcoholConsump),
        'AnyHealthcare': float(AnyHealthcare),
        'GenHlth': float(GenHlth),
        'MentHlth': float(MentHlth),
        'PhysHlth': float(PhysHlth),
        'DiffWalk': float(DiffWalk),
        'Sex': 1 if sex == 'Male' else 0,
       'Age': float(Age_Midpoint),
       'Age_Midpoint': float(Age_Midpoint), 
    }

    report_data = pd.DataFrame(user_report_data, index=[0])

    return report_data


# PATIENT DATA
user_data = user_report()
st.subheader('***Patient Input Data***')
st.write(user_data)


import pickle  # Import the pickle module

# Load the pre-trained model
with open('logistic_model2', 'rb') as model_file:
    logistic_reg = pickle.load(model_file)

# ... (rest of your Streamlit code)

# Use the loaded model for predictions
user_result = logistic_reg.predict(user_data)
# VISUALISATIONS
st.title('***Visualized Patient Report***')



# COLOR FUNCTION
if user_result[0]==0:
  color = 'blue'
else:
  color = 'red'


# Age vs HighBP
st.header('High Blood Pressure Value Graph (Others vs Yours)')
fig_high_bp, ax1 = plt.subplots()
sns.scatterplot(x='Age', y='HighBP', data=df, hue='Diabetes_binary', palette='Greens', ax=ax1)
sns.scatterplot(x=user_data['Age_Midpoint'], y=user_data['HighBP'], s=150, color=color, ax=ax1)
plt.xticks(np.arange(10, 100, 5))
plt.yticks(np.arange(0, 2, 1))
plt.title('0 - Healthy & 1 - Unhealthy')

# Display the plot in Streamlit
st.pyplot(fig_high_bp)

# Age vs HighChol
st.title('High Cholesterol Value Graph (Others vs Yours)')
fig_high_chol = plt.figure()
ax3 = sns.scatterplot(x='Age', y='HighChol', data=df, hue='Diabetes_binary', palette='magma')
ax4 = sns.scatterplot(x=user_data['Age_Midpoint'], y=user_data['HighChol'], s=150, color=color)
plt.xticks(np.arange(10, 100, 5))
plt.yticks(np.arange(0, 2, 1))
plt.title('0 - Healthy & 1 - Unhealthy')
st.pyplot(fig_high_chol)


# Age vs CholCheck
st.title('Cholesterol Check Value Graph (Others vs Yours)')
fig_chol_check = plt.figure()
ax5 = sns.scatterplot(x='Age_Midpoint', y='CholCheck', data=df, hue='Diabetes_binary', palette='Reds')
ax6 = sns.scatterplot(x=user_data['Age_Midpoint'], y=user_data['CholCheck'], s=150, color=color)
plt.xticks(np.arange(10, 100, 5))
plt.yticks(np.arange(0, 2, 1))
plt.title('0 - Healthy & 1 - Unhealthy')
st.pyplot(fig_chol_check)

# Age vs BMI
st.title('BMI Value Graph (Others vs Yours)')
fig_bmi = plt.figure()
ax7 = sns.scatterplot(x='Age_Midpoint', y='BMI', data=df, hue='Diabetes_binary', palette='Blues')
ax8 = sns.scatterplot(x=user_data['Age'], y=user_data['BMI'], s=150, color=color)
plt.xticks(np.arange(10, 100, 5))
plt.yticks(np.arange(0, 70, 5))
plt.title('0 - Healthy & 1 - Unhealthy')
st.pyplot(fig_bmi)

# Age vs Smoker
st.title('Smoker Value Graph (Others vs Yours)')
fig_smoker = plt.figure()
ax9 = sns.scatterplot(x='Age_Midpoint', y='Smoker', data=df, hue='Diabetes_binary', palette='rocket')
ax10 = sns.scatterplot(x=user_data['Age'], y=user_data['Smoker'], s=150, color=color)
plt.xticks(np.arange(10, 100, 5))
plt.yticks(np.arange(0, 2, 1))
plt.title('0 - Healthy & 1 - Unhealthy')
st.pyplot(fig_smoker)

# Age vs PhysActivity
st.title('Physical Activity Value Graph (Others vs Yours)')
fig_phys_activity = plt.figure()
ax11 = sns.scatterplot(x='Age_Midpoint', y='PhysActivity', data=df, hue='Diabetes_binary', palette='rainbow')
ax12 = sns.scatterplot(x=user_data['Age_Midpoint'], y=user_data['PhysActivity'], s=150, color=color)
plt.xticks(np.arange(10, 100, 5))
plt.yticks(np.arange(0, 2, 1))
plt.title('0 - Healthy & 1 - Unhealthy')
st.pyplot(fig_phys_activity)



# COLOR FUNCTION
if user_result[0] == 0:
    color = 'blue'
    output = 'You are not Diabetic'
else:
    color = 'red'
    output = 'You are Diabetic'

# Display the result with colored text
st.subheader('***Your Report***:')
st.markdown(f'<p style="color:{color}; font-size:20px;">{output}</p>', unsafe_allow_html=True)



 
user_rating = st.sidebar.slider("Rate this app (1 - 5)", 1, 5, 3)
if user_rating >= 4:
    st.sidebar.success("Thank you for your positive feedback! We're glad you enjoyed the app.")
elif 2 <= user_rating < 4:
    st.sidebar.info("Thank you for your feedback. We appreciate your input.")
else:
    st.sidebar.warning("We're sorry to hear that you didn't find the app helpful. Please let us know how we can improve.")
