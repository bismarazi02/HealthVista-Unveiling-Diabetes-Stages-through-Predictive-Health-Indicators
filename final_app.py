# -*- coding: utf-8 -*-
"""final_app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kc669hBjJZjcvyRaC9yoT3ioWflfx37n
"""

import streamlit as st
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
import numpy as np
df = pd.read_csv('Dataset=diabetes_binary_health_indicators_BRFSS2015.csv')
custom_styles = """
    :root {
        --background-color: #800080;  /* Purple color */
    }

    body {
        background-color: var(--background-color);
    }
"""

# Apply custom styles
st.markdown(f'<style>{custom_styles}</style>', unsafe_allow_html=True)
st.title("HealthVista-Unveiling-Diabetes-Stages-through-Predictive-Health-Indicators")
st.subheader("**By BismaRazi**")
st.sidebar.header("**Patient Data**")
st.subheader("**Training Data Stats**")
st.write(df.describe())
# X AND Y DATA
x = df.drop(['Diabetes_binary'], axis = 1)
y = df.iloc[:, -1]
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state = 0)


# FUNCTION
def user_report():
    HighBP(0=No,1=Yes) = st.sidebar.slider('HighBP', 0, 1, 0)
    HighChol = st.sidebar.slider('HighChol', 0, 1, 0)
    CholCheck = st.sidebar.slider('CholCheck', 0, 1, 0)
    BMI = st.sidebar.slider('BMI', 0, 67, 20)
    Smoker = st.sidebar.slider('Smoker', 0, 1, 0)
    Stroke = st.sidebar.slider('Stroke', 0, 1, 0)
    HeartDiseaseorAttack = st.sidebar.slider('HeartDiseaseorAttack', 0, 1, 0)
    PhysActivity = st.sidebar.slider('PhysActivity', 0, 1, 0)
    Fruits = st.sidebar.slider('Fruits', 0, 1, 0)
    Veggies = st.sidebar.slider('Veggies', 0, 1, 0)
    HvyAlcoholConsump = st.sidebar.slider('HvyAlcoholConsump', 0, 1, 0)
    AnyHealthcare = st.sidebar.slider('AnyHealthcare', 0, 1, 0)
    GenHlth = st.sidebar.slider('GenHlth', 0, 1, 0)
    MentHlth = st.sidebar.slider('MentHlth', 0, 1, 0)
    PhysHlth = st.sidebar.slider('PhysHlth', 0, 1, 0)
    DiffWalk = st.sidebar.slider('DiffWalk', 0, 1, 0)
    Age = st.sidebar.slider('Age', 21, 88, 33)
    # Use a selectbox for the "Sex" feature
    sex_options = ['Male', 'Female']
    sex_index = st.sidebar.selectbox('Sex', range(len(sex_options)), index=0)  # Default to Male
    sex = sex_options[sex_index]
    
    user_report_data = {
        'HighBP': float( HighBP(0=No,1=Yes) ),
        'HighChol': float(HighChol),
        'CholCheck': float(CholCheck),
        'BMI': float(BMI),
        'Smoker': float(Smoker),
        'Stroke': float(Stroke),
        'HeartDiseaseorAttack': float(HeartDiseaseorAttack),
        'PhysActivity': float(PhysActivity),
        'Fruits': float(Fruits),
        'Veggies': float(Veggies),
        'HvyAlcoholConsump': float(HvyAlcoholConsump),
        'AnyHealthcare': float(AnyHealthcare),
        'GenHlth': float(GenHlth),
        'MentHlth': float(MentHlth),
        'PhysHlth': float(PhysHlth),
        'DiffWalk': float(DiffWalk),
        'Sex': 1 if sex == 'Male' else 0,
        'Age': float(Age)
    }
    
    report_data = pd.DataFrame(user_report_data, index=[0])

    return report_data

# PATIENT DATA
user_data = user_report()
st.subheader('Patient Data')
st.write(user_data)


import pickle  # Import the pickle module

# Load the pre-trained model
with open('logistic_model1', 'rb') as model_file:
    logistic_reg = pickle.load(model_file)

# ... (rest of your Streamlit code)

# Use the loaded model for predictions
user_result = logistic_reg.predict(user_data)
# VISUALISATIONS
st.title('Visualised Patient Report')



# COLOR FUNCTION
if user_result[0]==0:
  color = 'blue'
else:
  color = 'red'


# Age vs HighBP
st.header('High Blood Pressure Value Graph (Others vs Yours)')
fig_high_bp = plt.figure()
ax1 = sns.scatterplot(x='Age', y='HighBP', data=df, hue='Diabetes_binary', palette='Greens')
ax2 = sns.scatterplot(x=user_data['Age'], y=user_data['HighBP'], s=150, color=color)
plt.xticks(np.arange(10, 100, 5))
plt.yticks(np.arange(0, 2, 1))
plt.title('0 - Healthy & 1 - Unhealthy')

# Age vs HighChol
st.header('High Cholesterol Value Graph (Others vs Yours)')
fig_high_chol = plt.figure()
ax3 = sns.scatterplot(x='Age', y='HighChol', data=df, hue='Diabetes_binary', palette='magma')
ax4 = sns.scatterplot(x=user_data['Age'], y=user_data['HighChol'], s=150, color=color)
plt.xticks(np.arange(10, 100, 5))
plt.yticks(np.arange(0, 2, 1))
plt.title('0 - Healthy & 1 - Unhealthy')
st.pyplot(fig_high_chol)


# Age vs CholCheck
st.header('Cholesterol Check Value Graph (Others vs Yours)')
fig_chol_check = plt.figure()
ax5 = sns.scatterplot(x='Age', y='CholCheck', data=df, hue='Diabetes_binary', palette='Reds')
ax6 = sns.scatterplot(x=user_data['Age'], y=user_data['CholCheck'], s=150, color=color)
plt.xticks(np.arange(10, 100, 5))
plt.yticks(np.arange(0, 2, 1))
plt.title('0 - Healthy & 1 - Unhealthy')
st.pyplot(fig_chol_check)

# Age vs BMI
st.header('BMI Value Graph (Others vs Yours)')
fig_bmi = plt.figure()
ax7 = sns.scatterplot(x='Age', y='BMI', data=df, hue='Diabetes_binary', palette='Blues')
ax8 = sns.scatterplot(x=user_data['Age'], y=user_data['BMI'], s=150, color=color)
plt.xticks(np.arange(10, 100, 5))
plt.yticks(np.arange(0, 70, 5))
plt.title('0 - Healthy & 1 - Unhealthy')
st.pyplot(fig_bmi)

# Age vs Smoker
st.header('Smoker Value Graph (Others vs Yours)')
fig_smoker = plt.figure()
ax9 = sns.scatterplot(x='Age', y='Smoker', data=df, hue='Diabetes_binary', palette='rocket')
ax10 = sns.scatterplot(x=user_data['Age'], y=user_data['Smoker'], s=150, color=color)
plt.xticks(np.arange(10, 100, 5))
plt.yticks(np.arange(0, 2, 1))
plt.title('0 - Healthy & 1 - Unhealthy')
st.pyplot(fig_smoker)

# Age vs PhysActivity
st.header('Physical Activity Value Graph (Others vs Yours)')
fig_phys_activity = plt.figure()
ax11 = sns.scatterplot(x='Age', y='PhysActivity', data=df, hue='Diabetes_binary', palette='rainbow')
ax12 = sns.scatterplot(x=user_data['Age'], y=user_data['PhysActivity'], s=150, color=color)
plt.xticks(np.arange(10, 100, 5))
plt.yticks(np.arange(0, 2, 1))
plt.title('0 - Healthy & 1 - Unhealthy')
st.pyplot(fig_phys_activity)

# Age vs Sex
st.header('Sex Distribution (Others vs Yours)')
fig_sex = plt.figure()
ax_sex = sns.countplot(x='Sex', data=df, hue='Diabetes_binary', palette='Set2')
ax_sex.set_title('0 - Healthy & 1 - Unhealthy')
plt.xticks(rotation=0)
st.pyplot(fig_sex)



# OUTPUT
st.subheader('Your Report: ')
output=''
if user_result[0]==0:
  output = 'You are not Diabetic'
else:
  output = 'You are Diabetic'
st.title(output)
