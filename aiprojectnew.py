# -*- coding: utf-8 -*-
"""aiprojectnew.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_bMXA786uyqRx8bAL3Bu8gG96WxRPfHE
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import math
from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.tools.tools import add_constant
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.feature_selection import f_classif
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE


from sklearn.metrics import mean_absolute_error , mean_absolute_percentage_error , mean_squared_error , accuracy_score
from mlxtend.plotting import plot_confusion_matrix
from sklearn.linear_model import LogisticRegression
# %matplotlib inline

import warnings
warnings.filterwarnings("ignore")

df1=pd.read_csv('/content/Dataset=diabetes_binary_health_indicators_BRFSS2015.csv')
df1.head()

df1.shape

df1.info()

df1.drop(['Education'], axis=1, inplace=True)
df1.drop(['Income'], axis=1, inplace=True)
df1.drop(['NoDocbcCost'], axis=1, inplace=True)

print(df1)

df1.describe()

"""preprocessing"""

df["Diabetes_binary"] = df["Diabetes_binary"].astype(int)
df["HighBP"] = df["HighBP"].astype(int)
df["HighChol"] = df["HighChol"].astype(int)
df["CholCheck"] = df["CholCheck"].astype(int)
df["BMI"] = df["BMI"].astype(int)
df["Smoker"] = df["Smoker"].astype(int)
df["Stroke"] = df["Stroke"].astype(int)
df["HeartDiseaseorAttack"] = df["HeartDiseaseorAttack"].astype(int)
df["PhysActivity"] = df["PhysActivity"].astype(int)
df["Fruits"] = df["Fruits"].astype(int)
df["Veggies"] = df["Veggies"].astype(int)
df["HvyAlcoholConsump"] = df["HvyAlcoholConsump"].astype(int)
df["AnyHealthcare"] = df["AnyHealthcare"].astype(int)
df["NoDocbcCost"] = df["NoDocbcCost"].astype(int)
df["GenHlth"] = df["GenHlth"].astype(int)
df["MentHlth"] = df["MentHlth"].astype(int)
df["PhysHlth"] = df["PhysHlth"].astype(int)
df["DiffWalk"] = df["DiffWalk"].astype(int)
df["Sex"] = df["Sex"].astype(int)
df["Age"] = df["Age"].astype(int)

df1.info()

df1.isnull().sum()

unique_values = {}
for col in df1.columns:
    unique_values[col] = df1[col].value_counts().shape[0]

pd.DataFrame(unique_values, index=['unique value count']).transpose()

#Function to view the value counts for the whole data
def v_counts(dataframe):
    for i in dataframe :
        print(dataframe[i].value_counts())

v_counts(df1)

plt.figure(figsize = (15,15))
for i,col in enumerate(['BMI', 'GenHlth', 'MentHlth', 'PhysHlth', 'Age']):
    plt.subplot(4,2,i+1)
    sns.boxplot(x = col, data = df ,palette='Set1')
plt.show()

df.duplicated().sum()

df2.Age[df2['Age'] == 1] = '18 to 24'
df2.Age[df2['Age'] == 2] = '25 to 29'
df2.Age[df2['Age'] == 3] = '30 to 34'
df2.Age[df2['Age'] == 4] = '35 to 39'
df2.Age[df2['Age'] == 5] = '40 to 44'
df2.Age[df2['Age'] == 6] = '45 to 49'
df2.Age[df2['Age'] == 7] = '50 to 54'
df2.Age[df2['Age'] == 8] = '55 to 59'
df2.Age[df2['Age'] == 9] = '60 to 64'
df2.Age[df2['Age'] == 10] = '65 to 69'
df2.Age[df2['Age'] == 11] = '70 to 74'
df2.Age[df2['Age'] == 12] = '75 to 79'
df2.Age[df2['Age'] == 13] = '80 or older'

df2.Diabetes_binary[df2['Diabetes_binary'] == 0] = 'No Diabetes'
df2.Diabetes_binary[df2['Diabetes_binary'] == 1] = 'Diabetes'

df2.HighBP[df2['HighBP'] == 0] = 'No High'
df2.HighBP[df2['HighBP'] == 1] = 'High BP'

df2.HighChol[df2['HighChol'] == 0] = 'No High Cholesterol'
df2.HighChol[df2['HighChol'] == 1] = 'High Cholesterol'

df2.CholCheck[df2['CholCheck'] == 0] = 'No Cholesterol Check in 5 Years'
df2.CholCheck[df2['CholCheck'] == 1] = 'Cholesterol Check in 5 Years'

df2.Smoker[df2['Smoker'] == 0] = 'No'
df2.Smoker[df2['Smoker'] == 1] = 'Yes'

df2.Stroke[df2['Stroke'] == 0] = 'No'
df2.Stroke[df2['Stroke'] == 1] = 'Yes'

df2.HeartDiseaseorAttack[df2['HeartDiseaseorAttack'] == 0] = 'No'
df2.HeartDiseaseorAttack[df2['HeartDiseaseorAttack'] == 1] = 'Yes'

df2.PhysActivity[df2['PhysActivity'] == 0] = 'No'
df2.PhysActivity[df2['PhysActivity'] == 1] = 'Yes'

df2.Fruits[df2['Fruits'] == 0] = 'No'
df2.Fruits[df2['Fruits'] == 1] = 'Yes'

df2.Veggies[df2['Veggies'] == 0] = 'No'
df2.Veggies[df2['Veggies'] == 1] = 'Yes'

df2.HvyAlcoholConsump[df2['HvyAlcoholConsump'] == 0] = 'No'
df2.HvyAlcoholConsump[df2['HvyAlcoholConsump'] == 1] = 'Yes'

df2.AnyHealthcare[df2['AnyHealthcare'] == 0] = 'No'
df2.AnyHealthcare[df2['AnyHealthcare'] == 1] = 'Yes'

df2.NoDocbcCost[df2['NoDocbcCost'] == 0] = 'No'
df2.NoDocbcCost[df2['NoDocbcCost'] == 1] = 'Yes'

df2.GenHlth[df2['GenHlth'] == 5] = 'Excellent'
df2.GenHlth[df2['GenHlth'] == 4] = 'Very Good'
df2.GenHlth[df2['GenHlth'] == 3] = 'Good'
df2.GenHlth[df2['GenHlth'] == 2] = 'Fair'
df2.GenHlth[df2['GenHlth'] == 1] = 'Poor'

df2.DiffWalk[df2['DiffWalk'] == 0] = 'No'
df2.DiffWalk[df2['DiffWalk'] == 1] = 'Yes'

df2.Sex[df2['Sex'] == 0] = 'Female'
df2.Sex[df2['Sex'] == 1] = 'Male'



df.head()

plt.figure(figsize = (20,10))
sns.heatmap(df1.corr(),annot=True , cmap ='YlOrRd' )
plt.title("correlation of feature")
Text(0.5, 1.0, 'correlation of feature')

#using histogram to understand dataset data better

df.hist(figsize=(20,15));

cols = ['HighBP', 'HighChol', 'CholCheck','Smoker',
       'Stroke', 'HeartDiseaseorAttack', 'PhysActivity', 'Veggies',
       'HvyAlcoholConsump', 'AnyHealthcare', 'NoDocbcCost', 'DiffWalk']

def create_plot_pivot(data2, x_column):

    _df_plot = data2.groupby([x_column, 'Diabetes_binary']).size() \
    .reset_index().pivot(columns='Diabetes_binary', index=x_column, values=0)
    return _df_plot

fig, ax = plt.subplots(3, 4, figsize=(20,20))
axe = ax.ravel()

c = len(cols)

for i in range(c):
    create_plot_pivot(df2, cols[i]).plot(kind='bar',stacked=True, ax=axe[i])
    axe[i].set_xlabel(cols[i])

fig.show()

df2["Diabetes_binary"].value_counts()

import matplotlib.pyplot as plt
import seaborn as sns

# Assuming you already have df2 DataFrame

figure1, plot1 = plt.subplots(1, 2, figsize=(10, 8))

sns.countplot(x="Diabetes_binary", data=df2, ax=plot1[0])

plt.show()

labels=["non-Diabetic","Diabetic"]

plt.pie(df2["Diabetes_binary"].value_counts() , labels =labels ,autopct='%.02f' );

sns.boxplot(x = 'Diabetes_binary_str', y = 'Age', data = df)
plt.title('Age vs Diabetes_binary_str')
plt.show()

pd.crosstab(df2.Age,df2.Diabetes_binary).plot(kind="bar",figsize=(10,10))
plt.title('Diabetes Disease Frequency for Ages')
plt.xlabel('Age')
plt.xticks(rotation=0)
plt.ylabel('Frequency')
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Assuming you already have df DataFrame

# Reset index to avoid potential issues
df_reset = df.reset_index(drop=True)

plt.figure(figsize=(25, 15))

# Plot histogram for non-diabetic individuals (Diabetes_binary == 0)
sns.histplot(df_reset.BMI[df_reset.Diabetes_binary == 0], color="g", label="No Diabetic", kde=False, bins=30)

# Plot histogram for diabetic individuals (Diabetes_binary == 1)
sns.histplot(df_reset.BMI[df_reset.Diabetes_binary == 1], color="r", label="Diabetic", kde=False, bins=30)

plt.title("Distribution of BMI for Diabetic and Non-Diabetic Individuals")
plt.xlabel("BMI")
plt.ylabel("Count")

plt.legend()
plt.show()

pd.crosstab(df.MentHlth,df.Diabetes_binary_str).plot(kind="bar",figsize=(30,12),color=['#1CA53B', '#FFA500' ])
plt.title('Diabetes Disease Frequency for MentHlth')
plt.xlabel('MentHlth')
plt.xticks(rotation=0)
plt.ylabel('Frequency')
plt.show()

pd.crosstab(df.PhysHlth,df.Diabetes_binary_str).plot(kind="bar",figsize=(30,12),color=['Blue', 'Red' ])
plt.title('Diabetes Disease Frequency for PhysHlth')
plt.xlabel('PhysHlth')
plt.xticks(rotation=0)
plt.ylabel('Frequency')
plt.show()

pd.crosstab(df.GenHlth,df.Diabetes_binary).plot(kind="bar",figsize=(30,12),color=['Purple', 'Green' ])
plt.title('Diabetes Disease Frequency for GenHlth')
plt.xlabel('GenHlth')
plt.xticks(rotation=0)
plt.ylabel('Frequency')
plt.show()

X=dff.drop("Diabetes_binary",axis=1)
y=dff["Diabetes_binary"]



X.columns

y.value_counts()

#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train_original, X_test_original, y_train_original, y_test_original = train_test_split(X, y, test_size=0.2, random_state=42)
from imblearn.over_sampling import SMOTE
from sklearn.metrics import accuracy_score,confusion_matrix, classification_report


X_train_resampled, y_train_resampled = smote.fit_resample(X_train_original, y_train_original)

# Create and train the logistic regression model on the resampled data
logistic_model2 = LogisticRegression(random_state=42)
logistic_model2.fit(X_train_resampled, y_train_resampled)

# Make predictions on the original test set
y_pred_original = logistic_model2.predict(X_test_original)

# Evaluate the model performance on the original test set
accuracy_original = accuracy_score(y_test_original, y_pred_original)
classification_report_original = classification_report(y_test_original, y_pred_original)

print("Original Test Set Results:")
print(f"Accuracy: {accuracy_original:.2f}")
print("Classification Report:\n", classification_report_original)

# Make predictions on the resampled training set
y_pred_resampled = logistic_model2.predict(X_train_resampled)

# Evaluate the model performance on the resampled training set
accuracy_resampled = accuracy_score(y_train_resampled, y_pred_resampled)
classification_report_resampled = classification_report(y_train_resampled, y_pred_resampled)

print("\nResampled Training Set Results:")
print(f"Accuracy: {accuracy_resampled:.2f}")
print("Classification Report:\n", classification_report_resampled)

df1

pip install imbalanced-learn

from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
import numpy as np

# Assuming X and y are your feature matrix and target variable
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Apply SMOTE to the training data
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X_train, y_train)

# Now, X_resampled and y_resampled contain the balanced data

y_resampled.value_counts()

import numpy as np

# Assuming y_resampled is your resampled target variable
unique_classes, class_counts = np.unique(y_resampled, return_counts=True)

for cls, count in zip(unique_classes, class_counts):
    print(f"Class {int(cls)}: {count} instances")

import pickle

pickle.dump(logistic_model2, open('/content/logistic_model2','wb'))

model_loaded=pickle.load(open('/content/logistic_model2','rb'))

X_new = np.array([1, 1, 1, 18, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 1, 0, 11]).reshape(1, -1)

# Make predictions on the new input data
y_pred_new = model_loaded.predict(X_new)

# Display the prediction
if y_pred_new[0] == 0:
    print('The person is not diabetic')
else:
    print('The person is diabetic')

import os

file_path = '/content/logistic_model2'

if os.path.exists(file_path):
    print(f"The file {file_path} exists.")
else:
    print(f"The file {file_path} does not exist.")

age_groups = {
    1: (18, 24),
    2: (25, 29),
    3: (30, 34),
    4: (35, 39),
    5: (40, 44),
    6: (45, 49),
    7: (50, 54),
    8: (55, 59),
    9: (60, 64),
    10: (65, 69),
    11: (70, 74),
    12: (75, 79),
    13: (80, 100)
}

# Map each age group to its midpoint and create a new column
df1['Age_Midpoint'] = df1['Age'].map(lambda x: sum(age_groups[x]) / 2)

# Drop the original 'Age' column
dff=df1.drop('Age', axis=1)

dff

X_new = np.array([1, 1, 1, 18, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 1, 0, 72]).reshape(1, -1)

# Make predictions on the new input data
y_pred_new = model_loaded.predict(X_new)

# Display the prediction
if y_pred_new[0] == 0:
    print('The person is not diabetic')
else:
    print('The person is diabetic')